JOUR 3

Job 2
show dbs

Job 3
db.product.insertOne({name:"chaussure", description:"une paire de chaussures", price:35, quantity:120})

Job 4
db.product.insertMany([{name:"Pantalon noir", description: "Un pantalon noir", price: 14.99, quantity: 12 }, {name: "chaussettes", description: "chaussete cool !", price:6, quantity:6}])


Job 5
étape 1 , créer une nouvelle collection "category" : db.createCollection("category")
étape 2, ajout de nouvelle category : db.category.insertMany([{name: "sous-vétement"},{name:'chaussure de ville'}, {name: "vétement"}])


job 6
Afficher les collection : show collections

job 7 :
Afficher les données de la collection "category" : db.category.find()

job 8 : Afficher seulement deux category
db.category.find().limit(2)

job 9 : affichage croissant.
db.product.find({}).sort({price: 1})

job 10 : Écrire une requête permettant de récupérer l’ensemble des produits classés par prix décroissant.
db.product.find({}).sort({price: -1})

job 11 : Écrire une requête permettant de récupérer les produits ayant un prix supérieur à 5 euros et un stock inférieur à 100.
db.product.find({quantity: {$lte: 100}, price : {$gt: 5} })

job 12 : Écrire une requête permettant de récupérer les produits ayant un prix supérieur à 14.99 euros ou un stock supérieur à 100.
db.product.find({price : {$gt: 14.99 }, quantity: {$gt: 100 } })

job 13 : requête pour récupérer l'ensemble des produits sans leurs id.
db.product.find({}, { _id: 0 })


Job 14 : récupérer une category par son id
db.category.findOne({_id : ObjectId("66463425e5ee8485d074b16e")})

